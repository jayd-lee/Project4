import java.util.*;
import java.io.*;

public class BlockedUser extends User {
    private ArrayList<User> blockedUsers;
    private ArrayList<User> invisibleUsers;
    private String blockedFile;
    private String invisibleFile;

    public BlockedUser(String name, String password, String email) {
        super(name, password, email);
        blockedFile = name + "_blockedUsers.txt";
        invisibleFile = name + "_invisibleUsers.txt";
        blockedUsers = new ArrayList<User>();
        invisibleUsers = new ArrayList<User>();
        showBlockedUsers();
        showInvisibleUsers();
    }

    public void blocked(User user) {
        blockedUsers.add(user);
        saveBlockedUsers();
    }

    public void invisible(User user) {
        invisibleUsers.add(user);
        saveInvisibleUsers();
    }

    public boolean isBlocked(User user) {
        return blockedUsers.contains(user);
    }

    public boolean isInvisible(User user) {
        return invisibleUsers.contains(user);
    }

    public ArrayList<User> getBlockedUsers() {
        return blockedUsers;
    }

    public ArrayList<User> getInvisibleUsers() {
        return invisibleUsers;
    }

    private void showBlockedUsers() {
        try {
            File f = new File(blockedFile);
            if (f.exists()) {
                FileInputStream fs = new FileInputStream(f);
                ObjectInputStream os = new ObjectInputStream(fs);
                blockedUsers = (ArrayList<User>) os.readObject();
                os.close();
                fs.close();
            }
        } catch (IOException | ClassNotFoundException e) {
            System.err.println("Error!");
        }
    }

    private void showInvisibleUsers() {
        try {
            File f = new File(invisibleFile);
            if (f.exists()) {
                FileInputStream fs = new FileInputStream(f);
                ObjectInputStream os = new ObjectInputStream(fs);
                invisibleUsers = (ArrayList<User>) os.readObject();
                os.close();
                fs.close();
            }
        } catch (IOException | ClassNotFoundException e) {
             System.err.println("Error Reading!");
        }
    }

    private void saveBlockedUsers() {
        try {
            FileOutputStream fos = new FileOutputStream(blockedFile);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(blockedUsers);
            os.close();
            fos.close();
        } catch (IOException e) {
            System.err.println("Error Writing!");
        }
    }

    private void saveInvisibleUsers() {
        try {
            FileOutputStream fos = new FileOutputStream(invisibleFile);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(invisibleUsers);
            os.close();
            fos.close();
        } catch (IOException e) {
             System.err.println("Error Writing!");
        }
    }
}
